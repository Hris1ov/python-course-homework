#--------------------   Booleans   --------------------

# x = 5
# x += 3
# print(x)

# x = 5
# x = x + 3
# x = 5 + 3 = 8

# fruits = ("intel","silicone","amd")

# if "silicone" in fruits:
#     print("Silicone is in fruits")


#--------------------   Format F strings   --------------------

#   print( '2+2',{Adam})

# user_name = 'Adam'
# user_surname = 'Byron'
# signature = 'Best regards,'

# #'Hello, Adam Byron!'
# print( f'''Hello,\n{user_name} {user_surname}|\n\n
# \t{signature}''')

# x = 123
# print(f"-->{x:>10}<--")
# print(f"-{x:<30.2f}-")

# –í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–µ—Ç–æ –∏–º–µ: –ò–≤–∞–Ω
# –í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∞—Ç–∞ –≤—ä–∑—Ä–∞—Å—Ç: 30

# name = input("Please enter your name:")
# age = input("Please enter your age:")
# print(f"Your name is: {name}")
# print(f"Your age is: {age}")

# number = (float(input("Please enter a number:")))
# print(f"Your number in percentage is: {number:.4%}")

# length_of_rectangle = int(input("Please enter the lenght: "))
# width_of_rectangle = float(input("Please enter the width: "))

# area = length_of_rectangle*width_of_rectangle

# print(f"P = {area:.3f}")

# F = C*(9//5)+32

# celsius = int(input("Please enter Celsius temperature: "))
# farenheit = celsius*9/5+32

# print(f"The Farenheit temparature is {farenheit:.2f}")

# date = int(input("Please enter a day of the month: "))
# month = int(input("Please enter a month: "))
# year = int(input("Please enter year: "))

# print(f"Your date is: {date:02}/{month:02}/{year:04}")



# ================== Homework =======================

# print(1,2,3,sep="-")

# print("Hello",end="")
# print("World",end="")
# print("!")

# x = 3
# print(type(x==3))

# name = input("Enter your name: ")
# print(f"Hello, {name}!")
# age = input("Tell me your age:")
# print(f"Ok, you look younger than {age}")


# print('12'>'18')

# print("-"*20," ","Escape Sequences"," ","-"*20)

#--------------------   Escape Sequences   --------------------

# print('lego1\nlego2')

# print('Distance\tmatters')
# print('Distance         matters')

# print('Shakespeare always told his friends about \"his great brown horse\"')

# print('''This is a random text with \"quotes\" in some places.\n
#     For example, here is a sentence with a \"quote\" in the middle.\n\t
#     Let's also add a new tab here for indentation.\n
# This line contains a \"quote\" and we want to add a new line.\n
# Here comes another quote: \"Be yourself; everyone else is already taken.\"\n
# Finally, let's end with a new line and a tab:\n	
# 	\t\"End of example.\"''')



# text = '''This is a random text with \"quotes\" in some places.\n
#     For example, here is a sentence with a \"quote\" in the middle.\n\t
#     Let's also add a new tab here for indentation.\n
# This line contains a \"quote\" and we want to add a new line.\n
# Here comes another quote: \"Be yourself; everyone else is already taken.\"\n
# Finally, let's end with a new line and a tab:\n	
# 	\t\"End of example.\"'''
# print(text.strip().title())

# text = '''This is a random text with \"quotes\" in some places.\n
#     For example, here is a sentence with a \"quote\" in the middle.\n\t
#     Let's also add a new tab here for indentation.\n
# This line contains a \"quote\" and we want to add a new line.\n
# Here comes another quote: \"Be yourself; everyone else is already taken.\"\n
# Finally, let's end with a new line and a tab:\n	
# 	\t\"End of example.\"'''
# print(text.upper())

#--------------------   Counting   --------------------

# count_t = text.count("t")
# print(f"The letter 'T' appears: {count_t} times in the text.")

# count_newlines = text.count('\n')
# print(f"The newline appears: {count_newlines} times in the text.")

#-------------------- Conditions ----------------------

# if 2+2:
#     print('hi')
#     print('Howdy')

# Interpolating 5 to x. If module of x is equal to 0 print of odd
# x = 5

# if x%2 == 2:
#     print('Odd')
# else:
#     print('Even')

# usr_lg = 'IT'

# if usr_lg == 'IT':
#     print('Ciao')
# elif usr_lg == 'BG':
#     print('–ó–¥—Ä–∞–≤–µ–π—Ç–µ')
# else:
#     print('Hello')

#-------------------- Sequences --------------------

# Sequence - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç. List, Tuple, Range, String

# –¢–∏–ø–æ–≤–µ—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç–∏ —Å–∞ –æ—Å–Ω–æ–≤–Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –æ–±—Ö–≤–∞—â–∞—â–∞ –Ω—è–∫–æ–ª–∫–æ –≤–≥—Ä–∞–¥–µ–Ω–∏ —Ç–∏–ø–∞, –∏–∑–ø–æ–ª–∑–≤–∞–Ω–∏ –∑–∞ —Å—ä—Ö—Ä–∞–Ω—è–≤–∞–Ω–µ –Ω–∞ –∫–æ–ª–µ–∫—Ü–∏–∏ –æ—Ç –¥–∞–Ω–Ω–∏.  
# –†–∞–∑–±–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ —Ç–µ–∑–∏ —Ç–∏–ø–æ–≤–µ –µ –∫–ª—é—á–æ–≤–æ –∑–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ —à–∏—Ä–æ–∫ —Å–ø–µ–∫—Ç—ä—Ä –æ—Ç –∑–∞–¥–∞—á–∏ –≤ Python ‚Äì –æ—Ç –º–∞–Ω–∏–ø—É–ª–∞—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω–∏ –¥–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Ü–∏–∫–ª–∏.  
# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞ –≤ Python –µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ–π—Ç–æ —Å—ä—Ö—Ä–∞–Ω—è–≤–∞ –ø–æ–¥—Ä–µ–¥–µ–Ω–∞ –∫–æ–ª–µ–∫—Ü–∏—è –æ—Ç –æ–±–µ–∫—Ç–∏.  
# –û—Å–Ω–æ–≤–Ω–∏—Ç–µ —Ç–∏–ø–æ–≤–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç–∏ —Å–∞ **—Å–ø–∏—Å—ä–∫ (list), –∫–æ—Ä—Ç–µ–∂ (tuple), –¥–∏–∞–ø–∞–∑–æ–Ω (range) –∏ –Ω–∏–∑ (string).
# –í—Å—è–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç –∏–º–∞ –∏–Ω–¥–µ–∫—Å - i, –∫–∞—Ç–æ —Å–µ –±—Ä–æ–π –æ—Ç 0. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ Sequence, –≤—Å–∏—á–∫–∏ –∏–∑–ø–æ–ª–∑–≤–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏—Ç–µ: length, indexing, 
# slicing, concatenation, repetition, membership test, min, max, count, index.

#-------------------- List --------------------

# mutable sequence

# list1 = ["cat","dog","banana"]
# print(list1[-2])

# mylist = ["nothing", 1, "anything"]
# print(type(mylist))
# print(mylist)
# print(f"Your list contains: {mylist[1]:>30} thing")
# print(len(mylist))

# fruits = ['apple','banana','cherry','ants']
# fruits.append('melon')
# print(fruits)
# fruits.sort()
# print(fruits)

# –°—ä–∑–¥–∞–π —Å–ø–∏—Å—ä–∫ —Å —á–∏—Å–ª–∞—Ç–∞ –æ—Ç 1 –¥–æ 10 –∏ –ø—Ä–∏–Ω—Ç–∏—Ä–∞–π —Å–∞–º–æ –ø—ä—Ä–≤–∏—Ç–µ 5 —á–∏—Å–ª–∞.
# 2Ô∏è‚É£ –î–æ–±–∞–≤–∏ –µ–ª–µ–º–µ–Ω—Ç "Python" –≤ –∫—Ä–∞—è –Ω–∞ —Å–ø–∏—Å—ä–∫–∞ ["Java", "C++", "JavaScript"].
# 3Ô∏è‚É£ –ó–∞–º–µ–Ω–∏ —Ç—Ä–µ—Ç–∏—è –µ–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å—ä–∫–∞ [10, 20, 30, 40, 50] —Å "Hello".
# 4Ô∏è‚É£ –ü—Ä–µ–±—Ä–æ–π –∫–æ–ª–∫–æ –ø—ä—Ç–∏ —á–∏—Å–ª–æ—Ç–æ 5 —Å–µ —Å—Ä–µ—â–∞ –≤ [5, 1, 5, 2, 5, 3, 5].
# 5Ô∏è‚É£ –ò–∑—Ç—Ä–∏–π –≤—Å–∏—á–∫–∏ —á–µ—Ç–Ω–∏ —á–∏—Å–ª–∞ –æ—Ç [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].

# numbers = [1,2,3,4,5,6,7,8,9,10]
# print(numbers[0][1][2][3][4])

# program_languages = ["Java", "C++", "JavaScript"]
# program_languages.append["Python"]
# print(program_languages)

# list_replace = [10, 20, 30, 40, 50]
# list_replace[2] = "Hello"
# print(list_replace)


#-------------------------  Tuple  ---------------------------

# imutable sequence

# user_birth_date = ("24","September",1992)
# print(f"You are born on {user_birth_date[1]}")

# tuple1 = ("thing","another thing","melon")
# list_from_tuple = list(tuple1)
# list_from_tuple[1] = ("choco")
# tuple1 = tuple(list_from_tuple)
# print(tuple1)

# fruits_as_a_tuple = ("apple", "banana", "cherry")
# list_from_tuple = list(fruits_as_a_tuple)
# list_from_tuple[0] = "milk"
# other_tuple_from_fruits = (list_from_tuple)
# print(other_tuple_from_fruits)

# # Define tuple
# monitoring = ("dynatrace","grafana","sitescope")
# # List the tuple
# l_monitoring = list(monitoring)
# # Modify the list by append
# l_monitoring.append("banana")
# # Define new tuple with modified list 
# tuple_l_monitoring = tuple(l_monitoring)
# # Print the new tuple
# print(tuple_l_monitoring)

# numbers = (10, 20, 30, 40, 50)
# lnumbers = list(numbers)
# lnumbers.remove(40)
# new_numbers = tuple(lnumbers)
# print(new_numbers)

# Increment with 10 all the numbers in the tuple

# nums = (1,2,3,4,5,6)
# l_num = list(nums)
# l_num = [x + 10 for x in l_num]
# t_num = tuple(l_num)
# print(t_num)

# Add element in tuple by list

# colors = ("red","green","blue","yellow")
# list_colors = list(colors)
# list_colors.append("orange")
# new_colors = tuple(list_colors)
# print(new_colors)

# Remove element from tuple by list

# elements = ("carbon", "ceramic", "plastic")
# list = list(elements)
# del list[1] # here you remove the number of element from the list
# refined = tuple(list)
# print(refined)

# elements = (1,2,3,4)
# list = list(elements)
# list.remove(2) # here you remove the exact element from the list
# new_elements = tuple(list)
# print(new_elements)

# elements = (1,2,3,4)
# list = list(elements)
# list = [x * 10 for x in list]
# new_elements = tuple(list)
# print(new_elements)

# fruits = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
# print(fruits[-2:])


# fruits = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
# fruits = (["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"])
# fruits.append("eagle")
# print(fruits)

# 6Ô∏è‚É£ –°—ä–∑–¥–∞–π –∫–æ—Ä—Ç–µ–∂ –æ—Ç 5 –∏–º–µ–Ω–∞ –∏ –≤–∑–µ–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3.

# names = ("al","bl","vl","gl","meh")
# print(names[-3:])

# 7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —á–∏—Å–ª–æ—Ç–æ 50 –µ –≤ –∫–æ—Ä—Ç–µ–∂–∞ (10, 20, 30, 40, 50).

# num = (10, 20, 30, 40, 50)
# print(50 in num)

# 8Ô∏è‚É£ –û–±–µ–¥–∏–Ω–∏ –¥–≤–∞ –∫–æ—Ä—Ç–µ–∂–∞ (1, 2, 3) –∏ (4, 5, 6) –≤ –Ω–æ–≤.

# tuple1 = (1, 2, 3)
# tuple2 = (4, 5, 6)
# merged = tuple1 + tuple2
# print(merged)

# 9Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–π –∫–æ—Ä—Ç–µ–∂–∞ ("a", "b", "c") –≤ —Å–ø–∏—Å—ä–∫, –¥–æ–±–∞–≤–∏ "d", –∏ –≥–æ –≤—ä—Ä–Ω–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ—Ä—Ç–µ–∂.

# gtuple = ("a", "b", "c")
# elist = list(gtuple)
# elist.append("d")
# tuple1 = tuple(elist)
# print(tuple1)

# üîü –ò–∑–≤–∞–¥–∏ –µ–ª–µ–º–µ–Ω—Ç –æ—Ç –∫–æ—Ä—Ç–µ–∂ —á—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å–∞ –º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∑–µ–º–∏ —Ç—Ä–µ—Ç–∏—è –µ–ª–µ–º–µ–Ω—Ç –æ—Ç ("apple", "banana", "cherry", "date").


# my_tuple = ("apple", "banana", "cherry", "date")
# my_list = list(my_tuple)
# del my_list[-2]
# my_new_tuple = tuple(my_list)
# print(my_new_tuple)




#--------------------------- Range ---------------------------------

# imutable sequence

import sys
# things = range(1,23356,2)
# print(list(things))
# print(f"{sys.getsizeof(things)}")

# numbers = list(range(1, 6))
# print(type(numbers))

# user_names = []

# for _ in range(5):
#     user_name = input('Your name: ')
#     user_names.append(user_name)

# print(user_names)

# numbers = range(1,11)
# print(list(numbers))

# odd = range(2,22,2)
# print(list(numbers))

# reverse = range(10,0,-1)
# print(list(reverse))

# five = range(5,55,5)
# print(list(five))

# for —è in range(1, 11):
#     print(f"7 x {—è} = {7 * —è}")

# for number in range(5):
#     print(list(number))

# 1Ô∏è‚É£1Ô∏è‚É£ –°—ä–∑–¥–∞–π range –æ—Ç 1 –¥–æ 20 –∏ –≥–æ –ø—Ä–µ–≤—ä—Ä–Ω–∏ –≤ —Å–ø–∏—Å—ä–∫.

# smtg = range(1,21)
# my_list = list(smtg)
# print(my_list)

# 1Ô∏è‚É£2Ô∏è‚É£ –ü—Ä–∏–Ω—Ç–∏—Ä–∞–π –≤—Å–∏—á–∫–∏ —á–µ—Ç–Ω–∏ —á–∏—Å–ª–∞ –º–µ–∂–¥—É 1 –∏ 50, –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ range().

# even = list(range(2,52,2))
# print(odd)

# 1Ô∏è‚É£3Ô∏è‚É£ –ü—Ä–∏–Ω—Ç–∏—Ä–∞–π —á–∏—Å–ª–∞—Ç–∞ –æ—Ç 100 –¥–æ 50, –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ range() —Å—ä—Å —Å—Ç—ä–ø–∫–∞ -5.

# myrange = list(range(100,49,-5))
# print(myrange)

#--------------------------- Slicing ---------------------------------

# text = [1,2,3,4,5,6,7,8,9,10]
# # print(text[1:9:2])

# for i in list(text):
#     print(text[::2])

# numbers = [10, 20, 30, 40, 50, 60]
# print(numbers[:3])

# fruits = ["apple", "banana", "cherry", "date", "elderberry"]
# print(fruits[-2:])

# my_tuple = ('a', 'b', 'c', 'd', 'e', 'f')
# mylist = list(my_tuple)
# print(mylist[1:4])

# numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
# mylist = list(numbers)
# print(mylist[::2])

# text = "Hello, world!"
# print(text[:5])

#--------------------------- for ---------------------------------


# fruits = ("apple", "banana", "cherry", "kiwi", "orange")
# for i in fruits:
#     print(i)

# values = (5, 15, 25, 35, 45)
# total = 0
# for i in values:
#     total += i
#     print(total, end=" ")

# –ò–∑–ø–æ–ª–∑–≤–∞–π —Ü–∏–∫—ä–ª, –∑–∞ –¥–∞ –Ω–∞–º–∞–ª–∏—à —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ x –æ—Ç 15 –¥–æ 1, –Ω–∞–º–∞–ª—è–≤–∞–π–∫–∏ —Å 2 –ø—Ä–∏ –≤—Å—è–∫–∞ —Å—Ç—ä–ø–∫–∞. –ü—Ä–∏–Ω—Ç–∏—Ä–∞–π —Ä–µ–∑—É–ª—Ç–∞—Ç–∞.

# value = 15
# while value > 0:
#     print(value, end=", " if value > 1 else "")
#     value -= 2
    
# –ò–∑–ø–æ–ª–∑–≤–∞–π —Ü–∏–∫—ä–ª, –∑–∞ –¥–∞ —Å–∏–º—É–ª–∏—Ä–∞—à —Ä–µ–¥—É—Ü–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∏—á–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –æ—Ç 50 –¥–æ 0, –∫–∞—Ç–æ –ø—Ä–∏ –≤—Å—è–∫–∞ —Å—Ç—ä–ø–∫–∞ –Ω–∞–º–∞–ª—è–≤–∞—à –ø–∞—Ä–∏—Ç–µ —Å 7. –ê–∫–æ –ø–∞—Ä–∏—Ç–µ —Å–∞ –ø–æ-–º–∞–ª–∫–æ –æ—Ç 7, —Å–ø—Ä–∏ —Ü–∏–∫—ä–ª–∞ –∏ –ø–æ–∫–∞–∂–∏ —Å—ä–æ–±—â–µ–Ω–∏–µ.

# money = 50

# while money > 7:
#     money -= 7
#     print(f"Current cash: {money}")


# if money <= 7:
#     print("Brokie.")

# –ò–∑–ø–æ–ª–∑–≤–∞–π —Ü–∏–∫—ä–ª, –∑–∞ –¥–∞ –Ω–∞–º–∞–ª–∏—à —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ x –æ—Ç 25 –¥–æ 0, –Ω–∞–º–∞–ª—è–≤–∞–π–∫–∏ —Å 3 –ø—Ä–∏ –≤—Å—è–∫–∞ —Å—Ç—ä–ø–∫–∞.

# x = 25

# while x > 0:
#     x -= 3
#     print(x, end=", ")

# –ó–∞–¥–∞—á–∞ 1: –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –∑–∞–ø–æ—á–≤–∞ —Å —á–∏—Å–ª–æ—Ç–æ 100 –∏ –Ω–∞–º–∞–ª—è–≤–∞ —Å 5 –Ω–∞ –≤—Å—è–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è, –¥–æ–∫–∞—Ç–æ –Ω–µ —Å—Ç–∞–Ω–µ –ø–æ-–º–∞–ª–∫–æ –æ—Ç –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω–∞ 10. –ò–∑–ø–æ–ª–∑–≤–∞–π while —Ü–∏–∫—ä–ª, –∑–∞ –¥–∞ –æ—Ç–ø–µ—á–∞—Ç–≤–∞—à —á–∏—Å–ª–∞—Ç–∞.

# program = 100

# while program >= 10:
#     print(program, end=", ")
#     program -= 5

# –ó–∞–¥–∞—á–∞ 2: –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –∑–∞–ø–æ—á–≤–∞ —Å —á–∏—Å–ª–æ—Ç–æ 1 –∏ —É–º–Ω–æ–∂–∞–≤–∞ —Å 2 –Ω–∞ –≤—Å—è–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è, –¥–æ–∫–∞—Ç–æ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–µ —Å—Ç–∞–Ω–µ –ø–æ-–≥–æ–ª—è–º–∞ –æ—Ç 100. –ò–∑–ø–æ–ª–∑–≤–∞–π while —Ü–∏–∫—ä–ª –∏ –æ—Ç–ø–µ—á–∞—Ç–≤–∞–π –≤—Å—è–∫–æ —á–∏—Å–ª–æ.

# i = 1

# while i <= 100:
#     print(i, end=", ")
#     i *= 2

# –ó–∞–¥–∞—á–∞ 3: –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –∑–∞–ø–æ—á–≤–∞ —Å —á–∏—Å–ª–æ—Ç–æ 0 –∏ –¥–æ–±–∞–≤—è 1 –∫—ä–º —á–∏—Å–ª–æ—Ç–æ –Ω–∞ –≤—Å—è–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è, –¥–æ–∫–∞—Ç–æ —á–∏—Å–ª–æ—Ç–æ —Å—Ç–∞–Ω–µ —Ä–∞–≤–Ω–æ –Ω–∞ 10. –ò–∑–ø–æ–ª–∑–≤–∞–π while —Ü–∏–∫—ä–ª –∏ –æ—Ç–ø–µ—á–∞—Ç–≤–∞–π —á–∏—Å–ª–æ—Ç–æ –Ω–∞ –≤—Å—è–∫–∞ —Å—Ç—ä–ø–∫–∞.

# program = 0

# while program <= 10:
#     print(program, end=", ")
#     program += 1

# –ó–∞–¥–∞—á–∞ 4: –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –∑–∞–ø–æ—á–≤–∞ —Å —á–∏—Å–ª–æ—Ç–æ 1 –∏ –Ω–∞ –≤—Å—è–∫–∞ —Å—Ç—ä–ø–∫–∞ —É–≤–µ–ª–∏—á–∞–≤–∞ —á–∏—Å–ª–æ—Ç–æ —Å 1, –¥–æ–∫–∞—Ç–æ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –º—É –Ω–µ —Å—Ç–∞–Ω–µ 20. –ù–æ –æ—Ç–ø–µ—á–∞—Ç–≤–∞–π —Å–∞–º–æ –Ω–µ—á–µ—Ç–Ω–∏ —á–∏—Å–ª–∞. –ò–∑–ø–æ–ª–∑–≤–∞–π while —Ü–∏–∫—ä–ª.

# z = 0

# while z <= 20:
#     if z % 2 == 0:
#         print(z, end=", ")
#     z += 1

# –ó–∞–¥–∞—á–∏ —Å for —Ü–∏–∫—ä–ª:
# –ó–∞–¥–∞—á–∞ 5: –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞ for —Ü–∏–∫—ä–ª, –∑–∞ –¥–∞ –æ—Ç–ø–µ—á–∞—Ç–∞ –≤—Å–∏—á–∫–∏ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 50, –∫–æ–∏—Ç–æ —Å–∞ –∫—Ä–∞—Ç–Ω–∏ –Ω–∞ 7.

# for number in range (1,51):
#     if number % 7 == 0:
#         print(number, end=", ")

# –ó–∞–¥–∞—á–∞ 6: –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞ for —Ü–∏–∫—ä–ª –∏ –æ—Ç–ø–µ—á–∞—Ç–≤–∞ –≤—Å–∏—á–∫–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ—Ç —Å–ø–∏—Å—ä–∫: numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9], –Ω–æ –∞–∫–æ —á–∏—Å–ª–æ—Ç–æ –µ —á–µ—Ç–Ω–æ, –æ—Ç–ø–µ—á–∞—Ç–≤–∞–π "even", –∞–∫–æ –µ –Ω–µ—á–µ—Ç–Ω–æ - "odd".

# for number in range(1, 11):
#     if number % 2 != 0:
#         print(f"{number} is odd")
#     if number % 2 == 0:
#         print(f"{number} is even")

# –ó–∞–¥–∞—á–∞ 7: –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞ for —Ü–∏–∫—ä–ª, –∑–∞ –¥–∞ –∏–∑—á–∏—Å–ª–∏ —Å—É–º–∞—Ç–∞ –Ω–∞ –≤—Å–∏—á–∫–∏ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100 –∏ —è –æ—Ç–ø–µ—á–∞—Ç–∞.

# total = 0
# for x in range(1, 101):
#     total += x
#     print(total)

# –ó–∞–¥–∞—á–∞ 8: –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞ for —Ü–∏–∫—ä–ª –∏ –æ—Ç–ø–µ—á–∞—Ç–≤–∞ –≤—Å–∏—á–∫–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ—Ç —Å–ø–∏—Å—ä–∫: fruits = ["apple", "banana", "cherry", "date"], –Ω–æ —Å–∞–º–æ –∞–∫–æ –¥—ä–ª–∂–∏–Ω–∞—Ç–∞ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∞ –µ –ø–æ-–≥–æ–ª—è–º–∞ –æ—Ç 5.

# fruits = ["apple", "banana", "cherry", "date"]

# for fruit in fruits:
#     if len(fruit) > 5:
#         print(fruit)

# –ó–∞–¥–∞—á–∞ 10: –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞ for —Ü–∏–∫—ä–ª –∏ —Å—ä–±–∏—Ä–∞ –≤—Å–∏—á–∫–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –æ—Ç —Å–ø–∏—Å—ä–∫: values = [12, 24, 36, 48, 60], –∫–æ–∏—Ç–æ —Å–∞ –∫—Ä–∞—Ç–Ω–∏ –Ω–∞ 12 –∏ –æ—Ç–ø–µ—á–∞—Ç–≤–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞.

# values = [12, 24, 36, 48, 60]
# total = 0

# for element in values:
#     if element % 12 == 0:
#         total += element
# print(total)

# –ò–∑–ø–æ–ª–∑–≤–∞–π —Ü–∏–∫—ä–ª, –∑–∞ –¥–∞ –Ω–∞–º–∞–ª–∏—à —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ x –æ—Ç 50 –¥–æ 1, –Ω–∞–º–∞–ª—è–≤–∞–π–∫–∏ —Å 5 –ø—Ä–∏ –≤—Å—è–∫–∞ —Å—Ç—ä–ø–∫–∞. –ü—Ä–∏–Ω—Ç–∏—Ä–∞–π —Ä–µ–∑—É–ª—Ç–∞—Ç–∞.

# x = 50

# while x > 0:
#     x -=5 
#     print (x, end=" ")

# 1Ô∏è‚É£ –°—É–º–∏—Ä–∞–Ω–µ –Ω–∞ —á–µ—Ç–Ω–∏ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 50:
# total = 0

# for num in range(1,51):
#     if num % 2 == 0:
#         total += num # total = total + num
# print(f"the sum is: {total}")

#--------------------------- Copy by reference/value ---------------------------------

# Copy by Reference	

# –ü—Ä–∏ mutable —Ç–∏–ø–æ–≤–µ (list, dict, set), –∫–æ–≥–∞—Ç–æ –Ω–∞–ø—Ä–∞–≤–∏–º –ø—Ä–∏—Å–≤–æ—è–≤–∞–Ω–µ (b = a), –¥–≤–µ—Ç–µ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ —Å–æ—á–∞—Ç –∫—ä–º —Å—ä—â–∏—è –æ–±–µ–∫—Ç –≤ –ø–∞–º–µ—Ç—Ç–∞, –∑–∞—Ç–æ–≤–∞ –∫–æ–ø–∏–µ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏—è.
# Python –ø—Ä–∞–≤–∏ —Ç–æ–≤–∞, –∑–∞ –¥–∞ –ø–µ—Å—Ç–∏ –ø–∞–º–µ—Ç. –ü—Ä–æ–º–µ–Ω–∏—Ç–µ –≤ –µ–¥–Ω–∞—Ç–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞ –∑–∞—Å—è–≥–∞—Ç –∏ –¥—Ä—É–≥–∞—Ç–∞.

# Copy by Value

# –ü—Ä–∏ immutable —Ç–∏–ø–æ–≤–µ (int, bool, float, str, tuple), –∞–∫–æ –ø—Ä–æ–º–µ–Ω–∏–º —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞, —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ç–∞ —Å–µ –ø—Ä–µ–Ω–∞—Å–æ—á–≤–∞ –∫—ä–º –Ω–æ–≤ –æ–±–µ–∫—Ç, –∑–∞—Ç–æ–≤–∞ –µ –∫–æ–ø–∏–µ –ø–æ —Å—Ç–æ–π–Ω–æ—Å—Ç
# –°—Ç–∞—Ä–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –æ—Å—Ç–∞–≤–∞ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏—è –∏ Garbage Collector (GC) –º–æ–∂–µ –¥–∞ —è –∏–∑—Ç—Ä–∏–µ.

# –ü—Ä–∏–º–µ—Ä –∑–∞ immutable:
# a = 10
# b = 15
# print(id(a))  # ID –Ω–∞ –∞ (10)
# print(id(b))  # ID –Ω–∞ b (15)

# b = 10  # –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ b –∫—ä–º –Ω–æ–≤ –æ–±–µ–∫—Ç (10)
# print(id(b))  # ID –Ω–∞ b –≤–µ—á–µ –µ –∫–∞—Ç–æ –Ω–∞ a

# # –ü—Ä–∏ mutable –æ–±–µ–∫—Ç–∏, –∞–∫–æ –∏—Å–∫–∞–º–µ –¥–∞ –Ω–∞–ø—Ä–∞–≤–∏–º –∫–æ–ø–∏–µ, –∫–æ–µ—Ç–æ –¥–∞ –ù–ï –∑–∞—Å—è–≥–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ shallow copy (–∫–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ –ø—ä—Ä–≤–æ—Ç–æ –Ω–∏–≤–æ) —á—Ä–µ–∑ –º–µ—Ç–æ–¥–∞ copy().

# # –ü—Ä–∏–º–µ—Ä –∑–∞ shallow copy:
# a = [10]
# b = [15]
# b1 = b.copy()  # –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤ —Å–ø–∏—Å—ä–∫ —Å –∏–¥–µ–Ω—Ç–∏—á–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏

# print(id(b))   # ID –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Å–ø–∏—Å—ä–∫
# print(id(b1))  # ID –Ω–∞ –∫–æ–ø–∏–µ—Ç–æ (—Ä–∞–∑–ª–∏—á–µ–Ω –æ—Ç b)

# b1.append(6)  # –î–æ–±–∞–≤—è–º–µ –µ–ª–µ–º–µ–Ω—Ç –∫—ä–º –∫–æ–ø–∏–µ—Ç–æ
# print(b)   # –û—Ä–∏–≥–∏–Ω–∞–ª—ä—Ç –æ—Å—Ç–∞–≤–∞ –Ω–µ–ø—Ä–æ–º–µ–Ω–µ–Ω [15]
# print(b1)  # –ö–æ–ø–∏–µ—Ç–æ –µ –ø—Ä–æ–º–µ–Ω–µ–Ω–æ [15, 6]




#--------------------------- Membership test: in/not in ---------------------------------


#--------------------------- Dictionaries ---------------------------------

# –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ —Å—ä–∑–¥–∞–≤–∞ —Ä–µ—á–Ω–∏–∫ —Å—ä—Å —Å–ª–µ–¥–Ω–∏—Ç–µ –¥–≤–æ–π–∫–∏ –∫–ª—é—á-—Å—Ç–æ–π–Ω–æ—Å—Ç:

# "name": "Ivan"
# "age": 25
# "city": "Sofia"

# –°–ª–µ–¥ —Ç–æ–≤–∞ –æ—Ç–ø–µ—á–∞—Ç–∞–π –∏–º–µ—Ç–æ –∏ –≤—ä–∑—Ä–∞—Å—Ç—Ç–∞.

# info = {
# "name": "Ivan",
# "age": 25,
# "city": "Sofia"
# }

# print(f"He is {info['name']} and he is {info['age']} yo.")


# fruits = {
#     'banana': 6.50,
#     'melon': 3.10,
#     'plums': 3.10
# }

# print(fruits['plum'])
# print(id(fruits['melon']))
# print(id(fruits['plums']))
# fruits['plum'] = 3.50
# print(id(fruits['plums ']))

# keys = fruits.keys()
# print(keys)

# val = fruits.values()
# print(val)

# –î–æ–±–∞–≤—è–Ω–µ –∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏
# –ó–∞–¥–∞—á–∞:
# –°—ä–∑–¥–∞–π —Ä–µ—á–Ω–∏–∫ —Å—ä—Å —Å–ª–µ–¥–Ω–∏—Ç–µ –¥–≤–æ–π–∫–∏:

# person = {"name": "Maria", "age": 30, "job": "engineer"}
# –î–æ–±–∞–≤–∏ –Ω–æ–≤ –∫–ª—é—á "salary" —Å—ä—Å —Å—Ç–æ–π–Ω–æ—Å—Ç 3500.
# –ò–∑—Ç—Ä–∏–π –∫–ª—é—á–∞ "job".
# –û—Ç–ø–µ—á–∞—Ç–∞–π –æ–±–Ω–æ–≤–µ–Ω–∏—è —Ä–µ—á–Ω–∏–∫.

# person = {
#     "name": "Maria", 
#     "age": 30, 
#     "job": "engineer"}

# person['salary'] = 3500
# # print(person)

# del person['job']
# print(person)

# prices = {
#     "apple": 2.50, "banana": 1.80, "orange": 2.20, "grape": 3.00
#     }

# for fruit, price in prices.items():
#     print(f"The price of {fruit} is:  {price}")

# print(prices.keys())
# print(prices.values())
# print(prices.items())
# print(prices)

# –°—ä–∑–¥–∞–π —Ä–µ—á–Ω–∏–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª, –≥–æ–¥–∏–Ω–∞).
# –ò–∑–≤–µ–¥–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –∑–∞ –∫–ª—é—á–∞ "–º–∞—Ä–∫–∞".

# cars = {
#     'manufacturer': 'Ford',
#     'model': 'T',
#     'year': 1892

# }

# print(cars.values())

# cars_new = {
#     'manufacturer': 'Ford',
#     'model': 'F150',
#     'year': 1995

# }

# cars_summary = [cars, cars_new]
# print(cars_summary.sorted())

# cars_new = {
#     'manufacturer': 'Ford',
#     'model': 'F150',
#     'year': 1995
# }

# del cars_new['model']
# print(cars_new.items())

# words = ["—è–±—ä–ª–∫–∞", "–±–∞–Ω–∞–Ω", "–ø–æ—Ä—Ç–æ–∫–∞–ª", "–≥—Ä–æ–∑–¥–µ"]
# word = words[::-1]

# for fr in word:
#     print(fr, end=",")
    
